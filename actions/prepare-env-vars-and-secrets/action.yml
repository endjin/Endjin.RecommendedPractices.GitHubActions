name: 'Endjin.RecommendedPractices.Build.SetEnvVarsAndSecret'
description: 'Injects environment variables and secrets passed as JSON-formatted strings'
inputs:
  environmentVariablesYaml:
    description: A YAML object representing environment variables that need to be passed into the 'scripted-build-pipeline' re-usable workflow via its '*PhaseEnv' inputs.
    default: '{}'
  secretsYaml:
    description: A YAML object representing secrets that need to be passed into the 'scripted-build-pipeline' re-usable workflow via its '*PhaseSecrets' inputs.
    default: '{}'
  secretsEncryptionKey:
    description: A string representing the shared secret used to encrypt the secrets YAML object.
    required: true
outputs:
  environmentVariablesYamlBase64:
    description: Base64-encoded YAML object representing environment variables that can be passed to the 'scripted-build-pipeline' re-usable workflow via its '*PhaseEnv' inputs.
    value: ${{ steps.prepareEnvVars.outputs.RESOLVED_ENV_VARS }}
  secretsYamlBase64:
    description: Base64-encoded YAML object representing secrets that can be passed to the 'scripted-build-pipeline' re-usable workflow via its '*PhaseSecrets' inputs.
    value: ${{ steps.prepareSecrets.outputs.RESOLVED_SECRETS }}

runs:
  using: "composite"
  steps:
  - id: installPsYaml
    name: Install PowerShell YAML module
    run: |
      Install-Module Powershell-yaml -Scope CurrentUser -Force -Verbose:$false
      Import-Module Powershell-yaml -Verbose:$false
    shell: pwsh 
  - id: prepareEnvVars
    name: Prepare Environment Variables
    run: |
      $srcEnvVars = @'
      ${{ inputs.environmentVariablesYaml }}
      '@
      Write-Host "REQUIRED_ENV_VARS: $srcEnvVars"
      $yaml = ConvertFrom-Yaml $srcEnvVars | ConvertTo-Yaml
      Write-Host "yaml: $yaml"
      $yamlb64 = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($yaml))
      ("RESOLVED_ENV_VARS={0}" -f $yamlb64) | Out-File -Append $env:GITHUB_OUTPUT
    shell: pwsh

  - id: prepareSecrets
    name: Prepare Secrets
    run: |
      $srcSecrets = @'
      ${{ inputs.secretsYaml }}
      '@
      Write-Host "REQUIRED_SECRETS: $srcSecrets"
      $yaml = ConvertFrom-Yaml $srcSecrets | ConvertTo-Yaml
      Write-Host "yaml: $yaml"
      $keyBytes = [Convert]::FromBase64String($env:SECRETS_ENCRYPTION_KEY)
      $secureYaml = ConvertFrom-SecureString (ConvertTo-SecureString $yaml -AsPlainText) -Key $keyBytes
      ("RESOLVED_SECRETS={0}" -f $secureYaml) | Out-File -Append $env:GITHUB_OUTPUT
    shell: pwsh
    env:
      SECRETS_ENCRYPTION_KEY: ${{ inputs.secretsEncryptionKey }}