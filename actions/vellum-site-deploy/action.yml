name: 'Endjin.RecommendedPractices.Deploy.Vellum'
description: 'Runs the standardised deployment process for Vellum-based Azure static web app'
inputs:
  azureClientId:
    description: 'The Azure Client ID for authenticating with Azure via GitHub Federated Identity'
    required: true
  azureTenantId:
    description: 'The Azure Tenant ID for authenticating with Azure'
    required: true
  azureSubscriptionId:
    description: 'The Azure Subscription ID of the Azure Static Web App'
    required: true
  githubToken:
    description: 'The default GitHub token for the workflow run'
    required: true
  swaApiToken:
    required: true
    description: 'The API token for the Azure Static Web App'
  swaResourceGroupName:
    description: 'The name of the resource group for the Azure Static Web App'
    required: true
  swaSiteName:
    description: 'The name of the Azure Static Web App'
    required: true


runs:
  using: "composite"
  steps:
  - name: Retrieve generated web site
    id: restore_cached_site
    uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684    # v4.2.3
    with:
      path: website.zip
      key: website-${{ github.sha }}
  
  - run: |
      unzip website.zip
      # The zip contains the full folder structure of the original source, so the extracted files
      # are several layers deep. We need to move the '.dist' folder into the 'website' folder as
      # this is where it is expected to be.
      mv home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/.dist website

      echo "*** DEBUG ***"
      echo "azureClientId: '${{ inputs.azureClientId }}'"
      echo "azureTenantId: '${{ inputs.azureTenantId }}'"
      echo "azureSubscriptionId: '${{ inputs.azureSubscriptionId }}'"
    name: Unzip web site artefact
    working-directory: ${{ github.workspace }}
    shell: bash

  - uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5    # v2.3.0
    with:
      client-id: ${{ inputs.azureClientId }}
      tenant-id: ${{ inputs.azureTenantId }}
      subscription-id: ${{ inputs.azureSubscriptionId }}
      enable-AzPSSession: true

  - name: 'Check existing preview sites'
    uses: azure/powershell@53dd145408794f7e80f97cfcca04155c85234709   # v2.0.0
    with:
      inlineScript: |
        # Lookup the web site name from provided configuration
        $webSiteName = "${{ inputs.swaSiteName }}"
        $resourceGroupName = "${{ inputs.swaResourceGroupName }}"
        Write-Host "Target Web Site: RG='${{ inputs.swaResourceGroupName }}' | Name='${{ inputs.swaSiteName }}'" -f Green

        $sites = Get-AzStaticWebAppBuild -Name "${{ inputs.swaSiteName }}" `
                                          -ResourceGroupName "${{ inputs.swaResourceGroupName }}" `
                                          -SubscriptionId "${{ inputs.azureSubscriptionId }}"

        # Current limits: 1 x Production & 10 x Preview sites
        #
        # To avoid errors when trying to deploy more than the limit of preview sites, we check
        # how many we have and delete the oldest one if we are already at the limit.

        if ($sites.Count -eq 11) {
          Write-Host "Maximum number of preview sites are already active"
          $oldest = $sites |
                      Where-Object { $_.name -ne "default" } |
                      Sort-Object LastUpdatedOn |
                      Select-Object -First 1
          
          if ($oldest) {
            Write-Host ("::notice title=Maximum number of preview sites are already active::Deleting least recently updated preview: {0} - {1}" -f $oldest.BuildId, $oldest.PullRequestTitle)
            try {
              Remove-AzStaticWebAppBuild -EnvironmentName $oldest.Name `
                                          -Name "${{ inputs.swaSiteName }}" `
                                          -ResourceGroupName "${{ inputs.swaResourceGroupName }}" `
                                          -SubscriptionId "${{ inputs.azureSubscriptionId }}"
            }
            catch {
              Write-Host ("::warning ::Unable to purge the least recently updated preview - the deployment may fail:`n{0}" -f $_.Exception.Message)
            }
          }
          else {
            Write-Host ("::warning title=Maximum number of preview sites are already active::Unable to derive the least recently updated preview for purging - the deployment may fail")
          }
        }
        else {
          Write-Host ("{0} previews active, no need to purge" -f $sites.Count)
        }
      azPSVersion: "latest"

  - name: Deploy
    id: deploy
    uses: azure/static-web-apps-deploy@1a947af9992250f3bc2e68ad0754c0b0c11566c9    # v1.0.0
    with:
      # ref: https://aka.ms/swaworkflowconfig
      azure_static_web_apps_api_token: ${{ inputs.swaApiToken }}
      repo_token: ${{ inputs.githubToken }} # Used for Github integrations (i.e. PR comments)
      action: upload
      app_location: website
      skip_app_build: true