on:
  workflow_call:
    inputs:
      netSdkVersion:
        description: The primary .NET SDK version required for the build process, as per the syntax required by the 'setup-dotnet' action.
        required: true
        type: string
        default: '6.0.x'
      additionalNetSdkVersion:
        description: An additional .NET SDK version required for the build process, as per the syntax required by the 'setup-dotnet' action.
        required: false
        type: string
      additionalCachePaths:
        description: Custom paths that need to be included in the multi-stage pipeline caching.
        required: false
        default: ''
        type: string
      configuration:
        description: The target build configuration.  
        required: false
        default: 'Release'
        type: string
      compilePhaseEnv:
        description: A JSON object representing the environment variables required when running the 'compile' stage of this workflow.
        required: false
        type: string
      compilePhaseSecrets:
        description: A Base64-encoded JSON object representing the secrets required when running the 'copmile' stage of this workflow.
        required: false
        type: string        
      testPhaseEnv:
        description: A JSON object representing the environment variables required when running the 'test' stage of this workflow.
        required: false
        type: string
      testPhaseSecrets:
        description: A Base64-encoded JSON object representing the secrets required when running the 'test' stage of this workflow.
        required: false
        type: string
      packagePhaseEnv:
        description: A JSON object representing the environment variables required when running the 'package' stage of this workflow.
        required: false
        type: string
      packagePhaseSecrets:
        description: A Base64-encoded JSON object representing the secrets required when running the 'package' stage of this workflow.
        required: false
        type: string        
      publishPhaseEnv:
        description: A JSON object representing the environment variables required when running the 'publish' stage of this workflow.
        required: false
        type: string
      publishPhaseSecrets:
        description: A Base64-encoded JSON object representing the secrets required when running the 'publish' stage of this workflow.
        required: false
        type: string        
      forcePublish:
        description: When true, the Publish stage will be run regardless of the current branch or tag.
        required: false
        default: false
        type: boolean
      skipCleanup:
        description: When true the pipeline clean-up stage will not be run. For example, the cache used between pipeline stages will be retained.
        required: false
        default: false
        type: boolean

    secrets:
      compilePhaseAzureCredentials:
        required: false

jobs:
  compile:
    name: Compile & Analyse
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.run_compile.outputs.semver }}
      major: ${{ steps.run_compile.outputs.major }}
      majorMinor: ${{ steps.run_compile.outputs.majorMinor }}
      preReleaseTag: ${{ steps.run_compile.outputs.preReleaseTag }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: endjin/Endjin.RecommendedPractices.GitHubActions/actions/set-env-vars-and-secrets@main
      with: 
        environmentVariablesJsonBase64: ${{ inputs.compilePhaseEnv}}
        secretsJsonBase64: ${{ inputs.compilePhaseSecrets}}
    - name: Debug Variables
      if: env.ACTIONS_RUNNER_DEBUG == 'true'
      run: |
        gci env:/ | fl | out-string | Write-Host
      shell: pwsh
    - name: Check if compilePhaseAzureCredentials secret is set
      id: compilePhaseAzureCredentials_secret_check
      shell: bash
      run: |
        if [ "${{ secrets.compilePhaseAzureCredentials_secret_check }}" != '' ]; then
          echo "available=true" >> $GITHUB_OUTPUT;
        else
          echo "available=false" >> $GITHUB_OUTPUT;
        fi
    - name: Azure CLI login
      if: ${{ steps.compilePhaseAzureCredentials_secret_check.outputs.available != 'true' }}
      uses: azure/login@v1
      with:
        creds: ${{ secrets.compilePhaseAzureCredentials }}
        enable-AzPSSession: true
    - uses: endjin/Endjin.RecommendedPractices.GitHubActions/actions/run-scripted-build@main
      id: run_compile
      with:
        displayName: Compile & Analyse
        netSdkVersion: ${{ inputs.netSdkVersion }}
        additionalNetSdkVersion: ${{ inputs.additionalNetSdkVersion }}
        tasks: 'Build,Analysis'
        configuration: ${{ inputs.configuration }}
        outputCachePaths: |
          .nuget-packages
          Solutions
          solutions
          ${{ inputs.additionalCachePaths }}

  test:
    needs:
    - compile
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: endjin/Endjin.RecommendedPractices.GitHubActions/actions/set-env-vars-and-secrets@main
      with: 
        environmentVariablesJsonBase64: ${{ inputs.testPhaseEnv}}
        secretsJsonBase64: ${{ inputs.testPhaseSecrets}}
    - name: Debug Variables
      if: env.ACTIONS_RUNNER_DEBUG == 'true'
      run: |
        gci env:/ | fl | out-string | Write-Host
      shell: pwsh
    - uses: endjin/Endjin.RecommendedPractices.GitHubActions/actions/run-scripted-build@main
      with:
        displayName: Run Tests
        netSdkVersion: ${{ inputs.netSdkVersion }}
        additionalNetSdkVersion: ${{ inputs.additionalNetSdkVersion }}
        tasks: 'Test,TestReport'
        configuration: ${{ inputs.configuration }}
        inputCachePaths: |
          .nuget-packages
          Solutions
          solutions
          ${{ inputs.additionalCachePaths }}
      env:
        BUILDVAR_TestReportTypes: HtmlInline;Cobertura
        # testing new multiple test logger support - will only affect repos using latest version of build module
        BUILDVAR_DotNetTestLoggers: >
          [
            "GitHubActions",
            "trx;logFileName=${{ github.workspace }}/test-results.trx"
          ]
    - id: check_coverage
      name: Check Code Coverage Output
      run: |
        if [ -f _codeCoverage/Cobertura.xml ]; then
          echo "EXISTS=true" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - name: Store Code Coverage Artefacts
      if: steps.check_coverage.outputs.EXISTS == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: CoverageReport      
        path: _codeCoverage
    - name: Generate Code Coverage Summary Report
      if: steps.check_coverage.outputs.EXISTS == 'true'
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: _codeCoverage/Cobertura.xml
        badge: true
        fail_below_min: false
        format: markdown
        hide_branch_rate: false
        hide_complexity: false
        indicators: true
        output: both
        thresholds: '60 80'
    - name: Publish Code Coverage Summary Report
      if: steps.check_coverage.outputs.EXISTS == 'true'
      uses: dtinth/markdown-report-action@v1
      with:
        name: Code Coverage
        title: Code Coverage Report
        body-file: code-coverage-results.md
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        nunit_files: "*TestResults.xml"   # produced by Pester
        trx_files: "*.trx"                # produced by dotnet test

  package:
    needs:
    - compile
    name: Package
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: endjin/Endjin.RecommendedPractices.GitHubActions/actions/set-env-vars-and-secrets@main
      with: 
        environmentVariablesJsonBase64: ${{ inputs.packagePhaseEnv}}
        secretsJsonBase64: ${{ inputs.packagePhaseSecrets}}
    - name: Debug Variables
      if: env.ACTIONS_RUNNER_DEBUG == 'true'
      run: |
        gci env:/ | fl | out-string | Write-Host
      shell: pwsh        
    - uses: endjin/Endjin.RecommendedPractices.GitHubActions/actions/run-scripted-build@main
      with:
        displayName: Build Packages
        netSdkVersion: ${{ inputs.netSdkVersion }}
        additionalNetSdkVersion: ${{ inputs.additionalNetSdkVersion }}
        tasks: 'Package'
        configuration: ${{ inputs.configuration }}
        inputCachePaths: |
          .nuget-packages
          Solutions
          solutions
          ${{ inputs.additionalCachePaths }}
        outputCachePaths: |
          _packages
          ${{ inputs.additionalCachePaths }}

  publish:
    needs:
    - compile
    - test
    - package
    name: Publish
    if: inputs.forcePublish || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: endjin/Endjin.RecommendedPractices.GitHubActions/actions/set-env-vars-and-secrets@main
      with: 
        environmentVariablesJsonBase64: ${{ inputs.publishPhaseEnv}}
        secretsJsonBase64: ${{ inputs.publishPhaseSecrets}}
    - name: Debug Variables
      if: env.ACTIONS_RUNNER_DEBUG == 'true'
      run: |
        gci env:/ | fl | out-string | Write-Host
      shell: pwsh        
    - uses: endjin/Endjin.RecommendedPractices.GitHubActions/actions/run-scripted-build@main
      with:
        displayName: Publish Packages
        netSdkVersion: ${{ inputs.netSdkVersion }}
        additionalNetSdkVersion: ${{ inputs.additionalNetSdkVersion }}
        tasks: 'Publish'
        inputCachePaths: |
          _packages
          ${{ inputs.additionalCachePaths }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    needs:
    - compile
    - test
    - package
    - publish
    name: Cleanup
    if: always() && !inputs.skipCleanup
    runs-on: ubuntu-latest
    steps:
    # We need to checkout the repo to get the branch information
    - name: Check out code
      uses: actions/checkout@v3
    - uses: endjin/Endjin.RecommendedPractices.GitHubActions/actions/remove-pipeline-state@main
      with:
        cacheKeyPrefix: build-state
