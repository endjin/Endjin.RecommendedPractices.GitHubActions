on:
  workflow_call:
    inputs:
      netSdkVersion:
        description: The primary .NET SDK version required for the build process, as per the syntax required by the 'setup-dotnet' action.
        required: true
        type: string
        default: '6.0.x'
      additionalNetSdkVersion:
        description: An additional .NET SDK version required for the build process, as per the syntax required by the 'setup-dotnet' action.
        required: false
        type: string
      additionalCachePaths:
        description: Custom paths that need to be included in the multi-stage pipeline caching.
        required: false
        default: ''
        type: string
      forcePublish:
        description: When true, the Publish stage will be run regardless of the current branch or tag.
        required: false
        default: false
        type: boolean
      skipCleanup:
        description: When true the pipeline clean-up stage will not be run. For example, the cache used between pipeline stages will be retained.
        required: false
        default: false
        type: boolean

jobs:
  compile:
    name: Compile & Analyse
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.run_compile.outputs.semver }}
      major: ${{ steps.run_compile.outputs.major }}
      majorMinor: ${{ steps.run_compile.outputs.majorMinor }}
      preReleaseTag: ${{ steps.run_compile.outputs.preReleaseTag }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: endjin/Endjin.RecommendedPractices.GitHubActions/actions/run-scripted-build@main
      id: run_compile
      with:
        displayName: Compile & Analyse
        netSdkVersion: ${{ inputs.netSdkVersion }}
        additionalNetSdkVersion: ${{ inputs.additionalNetSdkVersion }}
        tasks: 'Build,Analysis'
        outputCachePaths: |
          .nuget-packages
          Solutions
          ${{ inputs.additionalCachePaths }}

  test:
    needs:
    - compile
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: endjin/Endjin.RecommendedPractices.GitHubActions/actions/run-scripted-build@main
      with:
        displayName: Run Tests
        netSdkVersion: ${{ inputs.netSdkVersion }}
        additionalNetSdkVersion: ${{ inputs.additionalNetSdkVersion }}
        tasks: 'Test,TestReport'
        inputCachePaths: |
          .nuget-packages
          Solutions
          ${{ inputs.additionalCachePaths }}
    - name: Code Coverage Report 1
      uses: 5monkeys/cobertura-action@master
      with:
        path: _codeCoverage/Cobertura.xml
        minimum_coverage: 75
    - name: Code Coverage Report 2
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: _codeCoverage/Cobertura.xml
        badge: true
        fail_below_min: false
        format: markdown
        hide_branch_rate: false
        hide_complexity: false
        indicators: true
        output: both
        thresholds: '60 80'
    - name: Code Coverage Report 3
      uses: insightsengineering/coverage-action@v2
      with:
        # Path to the Cobertura XML report.
        path: _codeCoverage/Cobertura.xml
        # Minimum total coverage, if you want to the
        # workflow to enforce it as a standard.
        # This has no effect if the `fail` arg is set to `false`.
        threshold: 80
        # Fail the workflow if the minimum code coverage
        # reuqirements are not satisfied.
        fail: false
        # Publish the rendered output as a PR comment
        publish: false
        # Create a coverage diff report.
        diff: false
        # Branch to diff against.
        # Compare the current coverage to the coverage
        # determined on this branch.
        diff-branch: main
        # This is where the coverage reports for the
        # `diff-branch` are stored.
        # Branch is created if it doesn't already exist'.
        diff-storage: _xml_coverage_reports
    - name: Publish Code Coverage MD Report 2
      uses: dtinth/markdown-report-action@v1
      with:
        name: Code Coverage
        title: Code Coverage Report
        body-file: code-coverage-results.md

  package:
    needs:
    - compile
    name: Package
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: endjin/Endjin.RecommendedPractices.GitHubActions/actions/run-scripted-build@main
      with:
        displayName: Build Packages
        netSdkVersion: ${{ inputs.netSdkVersion }}
        additionalNetSdkVersion: ${{ inputs.additionalNetSdkVersion }}
        tasks: 'Package'
        inputCachePaths: |
          .nuget-packages
          Solutions
          ${{ inputs.additionalCachePaths }}
        outputCachePaths: |
          _packages
          ${{ inputs.additionalCachePaths }}

  publish:
    needs:
    - compile
    - test
    - package
    name: Publish
    if: inputs.forcePublish || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: endjin/Endjin.RecommendedPractices.GitHubActions/actions/run-scripted-build@main
      with:
        displayName: Publish Packages
        netSdkVersion: ${{ inputs.netSdkVersion }}
        additionalNetSdkVersion: ${{ inputs.additionalNetSdkVersion }}
        tasks: 'Publish'
        inputCachePaths: |
          _packages
          ${{ inputs.additionalCachePaths }}

  cleanup:
    needs:
    - compile
    - test
    - package
    - publish
    name: Cleanup
    if: always() && !inputs.skipCleanup
    runs-on: ubuntu-latest
    steps:
    # We need to checkout the repo to get the branch information
    - name: Check out code
      uses: actions/checkout@v3
    - name: Debug version output variables
      run: |
        echo "SemVer: ${{ needs.compile.outputs.semver }}"
        echo "Major: ${{ needs.compile.outputs.major }}"
        echo "MajorMinor: ${{ needs.compile.outputs.majorMinor }}"
        echo "PreReleaseTag: ${{ needs.compile.outputs.preReleaseTag }}"
      shell: bash
    - name: Cleanup
      run: |
        & gh extension install actions/gh-actions-cache
        
        $cacheEntries = & gh actions-cache list -R endjin/dotnet-adr -B feature/gha-build |
                          ConvertFrom-CSV -Header key,size,ref,time -Delimiter `t

        $cachesToDelete = $cacheEntries |
                            Where-Object { $_.key -eq "build-state-$($env:GITHUB_SHA)" -and $_.ref -eq $env:GITHUB_REF } |
                            Select-Object -Unique

        if (!$cachesToDelete) {
            Write-Host "No caches to delete for branch '$($env:GITHUB_REF)' in repository '$($env:GITHUB_REPOSITORY)'"
        }
        else {
            foreach ($cache in $cachesToDelete) {
                Write-Host "Deleting cache: '$($cache.key)' for branch '$($env:GITHUB_REF)' in repository '$($env:GITHUB_REPOSITORY)'"
                & gh actions-cache delete $cache.key -R $env:GITHUB_REPOSITORY -B $env:GITHUB_REF --confirm
            }
        }
      shell: pwsh
      env:
        GH_TOKEN: ${{ github.token }}
